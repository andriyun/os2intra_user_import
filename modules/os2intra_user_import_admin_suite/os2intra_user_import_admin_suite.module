<?php
/**
 * Implements hook_menu()
 */
function os2intra_user_import_admin_suite_menu() {
  $items = array();
   $items['admin/config/os2intra/user_import/admin_suite/membership_fix'] = array(
    'title' => 'Membership fix',
    'page callback'    => 'drupal_get_form',
    'page arguments' => array('os2intra_user_import_admin_suite_membership_fix_confirm_form'),
    'access arguments' => array('administer users'),
  );
  
  return $items;
}

function os2intra_user_import_admin_suite_membership_fix_confirm_form($form, &$form_state) {
  $form = array();
  $form['confirm_information'] = array(
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#markup' => t('Script will restore user membership (field og_org_ref)'),
  );
  $form['run_membership_fix'] = array(
    '#type' => 'submit',
    '#value' => t('Run script'),
  );
  return  $form;
}
/**
 * Implements hook_FORM_submit().
 */

function os2intra_user_import_admin_suite_membership_fix_confirm_form_submit($form, &$form_state) {
  $batch = array(
    'operations' => array(),
    'finished' => 'os2intra_user_import_admin_suite_membership_fix_finished',
    'title' => t('Membership fix'),
    'init_message' => t('Fix is starting...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Fix has encountered an error.')
  );
  $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->propertyCondition('status', 1);
    $query->propertyCondition ('uid', 1, '!=');
    $result = $query->execute();
    
  $users = array_keys($result['user']);
  
  foreach ( $users as $result) {
    $batch['operations'][] = array('os2intra_user_import_admin_suite_membership_fix_process', array($result));
  }
  batch_set($batch);
  batch_process('user'); // The path to redirect to when done.
}

/**
 * The batch processor.
 */
function os2intra_user_import_admin_suite_membership_fix_process($uid, &$context) {
  
$account = user_load($uid);
$context['message'] = "Now processing $account->name...";
$user_departments = array();
$departments = field_get_items('user', $account, 'og_user_node2');
foreach ($departments as $key => $field) {
  if (isset($field['target_id'])) {
    $user_departments[] = $field['target_id'];
  }
}
$org_ref = array();
$og_org_ref =  field_get_items('user', $account, 'og_org_ref');
foreach ($departments as $key => $field) {
  if (isset($field['target_id'])) {
    $org_ref[] = $field['target_id'];
  }
}

foreach ($user_departments as $department) {
  $department_node =  node_load($department);
  $term = taxonomy_term_load($department_node->field_os2intra_organisation[LANGUAGE_NONE][0]['target_id']);
  $parent_terms = 	taxonomy_get_parents_all($term->tid);
  foreach ($parent_terms as $term) {
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', variable_get('os2intra_groups_node_type'));
    $query->fieldCondition(variable_get('os2intra_groups_organisation_connection_field'), variable_get('os2intra_groups_organisation_connection_reference'), $term->tid, '=');

    $result = $query->execute();

    if ($result && $nid= $result['node']) {
     if (!in_array($nid, $org_ref ))
      $org_ref[] =  key($result['node']);
    }
  }
}
$org_ref = array_diff($org_ref, $user_departenets);
$org_ref_array =  array();
foreach ($org_ref as $nid) {
  $org_ref_array[] = array('target_id' => $nid);
}

$fields = array(
  "og_org_ref" => array(LANGUAGE_NONE =>$org_ref_array),
);
user_save($account, $fields);
 foreach ($org_ref as $gid) {
  og_role_revoke('node', $gid, $account->uid, variable_get('os2intra_user_import_og_role_id_primary', 16));
}
}

/**
 * The batch finish handler.
 */
function os2intra_user_import_admin_suite_membership_fix_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Fix is complete!');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }

}